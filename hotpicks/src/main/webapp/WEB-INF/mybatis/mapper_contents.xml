<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.kitri.hotpicks.contents.dao.ContentsDao">

 	<insert id="insertSido" parameterType="java.util.List">
	<foreach collection="list" item="sido" open="INSERT ALL">
	INTO sido(sdcode, sdname) VALUES(#{sido.sdCode}, #{sido.sdName})
	</foreach>
	INTO sido(sdcode, sdname) VALUES(0, '전체지역')
	SELECT * FROM dual
 	</insert>
 	
 	<insert id="insertSigunguEx" parameterType="java.util.List">
 	<foreach collection="list" item="sido" open="INSERT ALL" index="index" close="SELECT * FROM dual">
 	INTO sigungu(sggcode,sggname,sdcode) VALUES(0, '전체지역', #{sido.value})
 	</foreach>
 	</insert>
 	
 	<insert id="insertSigunguList" parameterType="java.util.List">
 	<foreach collection="list" item="sigungu" open="INSERT ALL" close="SELECT * FROM dual">
 	INTO sigungu(sggcode,sggname,sdcode) VALUES(#{sigungu.sggCode}, #{sigungu.sggName}, #{sigungu.sdCode})
 	</foreach>
 	</insert>
 	
 	<insert id="insertSigungu" parameterType="sigunguDto">
 	INSERT INTO sigungu(sggcode,sggname,sdcode) 
 	VALUES(#{sggCode}, #{sggName}, #{sdCode})
 	</insert>

	<select id="selectSido" resultType="sidoDto">
	SELECT *
	FROM sido
	ORDER BY sdcode
<!-- 	WHERE sdcode != 0 -->
	</select>
	
	<select id="selectSigungu" parameterType="int" resultType="sigunguDto">
	SELECT *
	FROM sido s inner join sigungu g
	ON s.sdcode = g.sdcode
	WHERE s.sdcode = #{sdCode}<!-- and s.sdcode != 0 -->
	</select>
	
	<select id="selectContentsType" resultType="contentsTypeDto">
	SELECT *
	FROM contentscate
	ORDER BY catid desc
	</select>
	
	
	<insert id="insertContentsCate">
		INSERT ALL
		INTO contentscate(catid, catname, cattype, catcode)
		VALUES(1, '축제', 'cat2', 'A0207')
		INTO contentscate(catid, catname, cattype, catcode)
		VALUES(2, '공연', 'cat3', 'A02080100')
		INTO contentscate(catid, catname, cattype, catcode)
		VALUES(2, '공연', 'cat3', 'A02080200')
		INTO contentscate(catid, catname, cattype, catcode)
		VALUES(2, '공연', 'cat3', 'A02080300')
		INTO contentscate(catid, catname, cattype, catcode)
		VALUES(2, '공연', 'cat3', 'A02080400')
		INTO contentscate(catid, catname, cattype, catcode)
		VALUES(2, '공연', 'cat3', 'A02080800')
		INTO contentscate(catid, catname, cattype, catcode)
		VALUES(2, '공연', 'cat3', 'A02080900')
		INTO contentscate(catid, catname, cattype, catcode)
		VALUES(2, '공연', 'cat3', 'A02081000')
		INTO contentscate(catid, catname, cattype, catcode)
		VALUES(3, '행사', 'cat3', 'A02080500')
		INTO contentscate(catid, catname, cattype, catcode)
		VALUES(3, '행사', 'cat3', 'A02080600')
		INTO contentscate(catid, catname, cattype, catcode)
		VALUES(3, '행사', 'cat3', 'A02080700')
		SELECT * 
		FROM dual
	</insert>
	
	<!-- insert all문으로 돌리면 열이 너무 길어 DB가 한번에 처리하지못함.(tourapi contents 200개 이하는 가능)
	 <insert id="insertApiContents" parameterType="java.util.List">
 	<foreach collection="list" item="contents" open="INSERT ALL" close="SELECT * FROM dual">
 	INTO contents(contentsid, catcode, catid, sggcode, sdcode, title, image1, image2, hit)
 	VALUES(#{contents.contentsId}, #{contents.catCode}, #{contents.catId}, #{contents.sggCode}, 
 		#{contents.sdCode}, #{contents.title}, #{contents.image1}, #{contents.image2}, #{contents.hit})
 	</foreach>
 	</insert> -->
 	
 	<!-- origin -->
	<!-- <insert id="insertApiContents" parameterType="contentsDto">
 	INSERT INTO contents(contentsid, catcode, catid, sggcode, sdcode, title, image1, image2, hit)
 	VALUES(#{contentsId}, #{catCode}, #{catId}, #{sggCode}, 
 		#{sdCode}, #{title}, #{image1}, #{image2}, #{hit})
 	</insert> -->
 	
 	<!-- for merge -->
	<update id="insertApiContents" parameterType="contentsDto">
	<![CDATA[
	MERGE INTO contents
		USING dual
			ON(contentsid = #{contentsId})
		WHEN MATCHED THEN
			UPDATE SET
				catcode = #{catCode}, 
				catid = #{catId}, 
				sggcode = #{sggCode}, 
				sdcode = #{sdCode}, 
				title = #{title}, 
				image1 = #{image1}, 
				image2 = #{image2}, 
				updatedate = sysdate, 
				isend = 1
			WHERE contentsid = #{contentsId}
		WHEN NOT MATCHED THEN
		 	INSERT (contentsid, catcode, catid, sggcode, sdcode, title, image1, image2, hit, updatedate, isend)
		 	VALUES(#{contentsId}, #{catCode}, #{catId}, #{sggCode}, #{sdCode}, #{title}, #{image1}, #{image2}, #{hit}, sysdate, 1)
 	]]>
 	</update>
 	
 	<select id="existContentsList" resultType="int">
	SELECT contentsid
	FROM contentsdetail
	</select>
 	
 	<!-- <insert id="insertApiContentsimage" parameterType="contentsImageDto">
 	INSERT INTO contentsImage(contentsid, serialnum, imgname, originimgurl, smallimageurl)
 	VALUES(#{contentsId}, #{serialNum}, #{imgName}, #{originImgurl}, #{smallImageUrl})
 	</insert> -->
 	<!-- origin -->
	<insert id="insertApiContentsDetail" parameterType="contentsDetailDto">
 	INSERT INTO contentsDetail(contentsid, homepage, telname, tel, playtime, program, usetime,
 	 spendtime, agelimit, bookingplace, discountinfo, placeinfo, infosogae, infonaeyong,
 	 eventstartdate, eventenddate, xpoint, ypoint, zipcode, addr1, addr2)
 	VALUES(#{contentsId}, #{homePage}, #{telName}, #{tel}, #{playtime}, #{program}, #{usetime},
 	 #{spendtime}, #{ageLimit},	#{bookingPlace}, #{discountInfo}, #{placeInfo}, #{infoSogae}, #{infoNaeyong},
 	 #{eventStartDate}, #{eventEndDate}, #{xPoint}, #{yPoint}, #{zipCode}, #{addr1}, #{addr2})
 	</insert>
 	
 	<update id="updateApiContentsDetail" parameterType="contentsDetailDto">
 	UPDATE contentsdetail
	SET	homepage = #{homePage},
		telname = #{telName},
		tel = #{tel},
		playtime = #{playtime},
		program = #{program},
		usetime = #{usetime},
		spendtime = #{spendtime},
		agelimit = #{ageLimit},
		bookingplace = #{bookingPlace},
		discountinfo = #{discountInfo},
		placeinfo = #{placeInfo},
		infosogae = #{infoSogae},
		infonaeyong = #{infoNaeyong},
		eventstartdate = #{eventStartDate},
		eventenddate = #{eventEndDate},
		xpoint = #{xPoint},
		ypoint = #{yPoint},
		zipcode = #{zipCode},
		addr1 = #{addr1},
		addr2 = #{addr2}
	WHERE contentsid = #{contentsId}
	</update>
 	
 	
 	<!-- for merge -->
	<!-- <update id="insertApiContentsDetail" parameterType="contentsDetailDto">
 	<![CDATA[
	MERGE INTO contentsDetail
		USING dual
			ON(contentsid = #{contentsId})
		WHEN MATCHED THEN
			UPDATE SET 
				homepage = #{homePage},
				telname = #{telName},
				tel = #{tel},
				playtime = #{playtime},
				program = #{program},
				usetime = #{usetime},
				spendtime = #{spendtime},
				agelimit = #{ageLimit},
				bookingplace = #{bookingPlace},
				discountinfo = #{discountInfo},
				placeinfo = #{placeInfo},
				infosogae = #{infoSogae},
				infonaeyong = #{infoNaeyong},
				eventstartdate = #{eventStartDate},
				eventenddate = #{eventEndDate},
				xpoint = #{xPoint},
				ypoint = #{yPoint},
				zipcode = #{zipCode},
				addr1 = #{addr1},
				addr2 = #{addr2}
			WHERE contentsid = #{contentsId}
		WHEN NOT MATCHED THEN
		 	INSERT (contentsid, homepage, telname, tel, playtime, program, usetime,
 	 				spendtime, agelimit, bookingplace, discountinfo, placeinfo, infosogae,
 	 				infonaeyong, eventstartdate, eventenddate, xpoint, ypoint, zipcode, addr1, addr2)
		 	VALUES(#{contentsId}, #{homePage}, #{telName}, #{tel}, #{playtime}, #{program}, #{usetime}, #{spendtime},
			 		#{ageLimit}, #{bookingPlace}, #{discountInfo}, #{placeInfo}, #{infoSogae}, #{infoNaeyong},
			 	 	#{eventStartDate}, #{eventEndDate}, #{xPoint}, #{yPoint}, #{zipCode}, #{addr1}, #{addr2})
 	]]>
 	</update> -->
 	
 	
 	<!-- for merge -->
	<update id="insertApiContentsimage" parameterType="contentsImageDto">
	<![CDATA[
 	MERGE INTO contentsImage
		USING dual
			ON(contentsid = #{contentsId})
		WHEN MATCHED THEN
			UPDATE SET 
				imgname = #{imgName},
				originimgurl = #{originImgurl},
				smallimageurl = #{originImgurl}
			WHERE contentsid = #{contentsId}
		WHEN NOT MATCHED THEN
		 	INSERT (contentsid, serialnum, imgname, originimgurl, smallimageurl)
 			VALUES(#{contentsId}, #{serialNum}, #{imgName}, #{originImgurl}, #{originImgurl})
 	]]>
 	</update>
 	<select id="selectMyHashTag" parameterType="map" resultType="String">
 	 SELECT h.hashtag
		FROM hashtag h INNER JOIN review r
		ON h.rseq = r.rseq
		WHERE r.userid = #{userId}
		AND rownum = 1
		AND h.hashtag in (SELECT c.tag
                            FROM(SELECT h.hashtag tag, count(h.hashtag) cnt
                                    FROM hashtag h INNER JOIN review r
                                    ON h.rseq = r.rseq
                                    WHERE r.userid = #{userId}
                                    GROUP BY h.hashtag
                                    ORDER by cnt desc)c
                            WHERE rownum &lt;= 5)
		ORDER BY r.logtime desc
 	</select>
 	
	<select id="rContentslistTrend" parameterType="map" resultType="String">
	  select hh.hashtag hashtag
            from(select rownum rank, h.hashtag hashtag, h.cnt cnt
                    from (select hashtag, count(*) cnt
                            from hashtag
                            where logTime &gt; sysdate - 30
                            group by hashtag
                            order by count(*) desc) h) hh
            where rownum = 1
	</select>

	<select id="rContentslistByTag" parameterType="String" resultType="contentsDto">
	SELECT s.*
                    FROM(SELECT c.*, nvl(r.count,0) rvcnt
							FROM contents c INNER JOIN contentsdetail d
							ON c.contentsid = d.contentsid
							LEFT OUTER JOIN (SELECT contentsid, count(contentsid) count
											FROM review
											GROUP BY contentsid) r
							ON c.contentsid = r.contentsid
							WHERE (1!=1
								OR c.title like '%'|| #{tag} || '%'
								OR d.addr1 like '%'|| #{tag} || '%'
								OR d.infosogae like '%'|| #{tag} || '%'
								OR d.infonaeyong like '%'|| #{tag} || '%'
								OR d.program like '%'|| #{tag} || '%')
                                ORDER BY hit DESC, rvCnt DESC)s
                    WHERE ROWNUM &lt;=4
	</select>
	
	<select id="contentslist" parameterType="map" resultType="contentsDto">
		<if test="startSeq != null || endSeq != null">
			SELECT t.*		
			FROM	(SELECT rownum rang, s.*		
					FROM	(
					</if>
							SELECT c.*, nvl(r.count,0) rvcnt
							FROM contents c INNER JOIN contentsdetail d
							ON c.contentsid = d.contentsid
							LEFT OUTER JOIN (SELECT contentsid, count(contentsid) count
											FROM review
											GROUP BY contentsid) r
							ON c.contentsid = r.contentsid
							WHERE 1=1 
							<choose>
								<when test="wordList != null">
									<foreach collection="wordList" open="AND(1!=1" close=")" item="word">
								OR c.title like '%'|| #{word} || '%'
								OR d.addr1 like '%'|| #{word} || '%'
								OR d.infosogae like '%'|| #{word} || '%'
								OR d.infonaeyong like '%'|| #{word} || '%'
								OR d.program like '%'|| #{word} || '%'
								</foreach>
								</when>
								<otherwise>
								AND eventenddate > to_char(sysdate,'yyyymmdd')
								AND c.image2 != 'noImage_list.png' AND c.isend = 1
									<if test="catId != null and catId != 0">
									AND c.catid = #{catId}
									</if>
									<if test="sdCode != null and sdCode != 0">
									AND c.sdcode = #{sdCode} 
									</if>
									<if test="sggCode != null and sggCode != 0">
									AND c.sggcode = #{sggCode} 
									</if>
								</otherwise>
							</choose>
							ORDER BY hit DESC, rvCnt DESC
		<if test="startSeq != null || endSeq != null">
							)s
					WHERE rownum &lt; = #{endSeq})t
			WHERE 	t.rang &gt; #{startSeq}		
		</if>
							
	<!-- <if test="catId != null and catId != 0">
	AND c.catid = #{catId}
	</if>
	<if test="sdCode != null and sdCode != 0">
	AND c.sdcode = #{sdCode} 
	</if>
	<if test="sggCode != null and sggCode != 0">
	AND c.sggcode = #{sggCode} 
	</if>
	
	<if test="wordList != null">
	addr1, infonaeyong, infosogae , program, title
		<foreach collection="wordList" open="AND(1!=1" close=")" item="word">
		OR c.title like '%'|| #{word} || '%'
		OR d.addr1 like '%'|| #{word} || '%'
		OR d.infosogae like '%'|| #{word} || '%'
		OR d.infonaeyong like '%'|| #{word} || '%'
		OR d.program like '%'|| #{word} || '%'
		</foreach>
	</if>
	 -->
	</select>  
	
 </mapper>